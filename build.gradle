apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'cobertura'

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath "net.saliman:gradle-cobertura-plugin:2.2.2"
    }
}

allprojects {
    apply plugin: 'forge'

    minecraft {
        version = "1.7.10-10.13.0.1208"
        assetDir = "eclipse/assets"
    }

    version = "1.2.0"

    archivesBaseName = "ChatMirumiru-1.7.10"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def defaultEncoding = 'UTF-8'
compileJava {
    options.encoding = defaultEncoding
}
[compileJava, compileTestJava].each{
    it.options.encoding = 'UTF-8'
    it.options.compilerArgs += ['-source', '1.7', '-target', '1.7']
}

repositories.mavenCentral()
dependencies {
    testCompile 'junit:junit:4.11'
}
sourceSets.test.java.srcDirs sourceSets.main.java

checkstyle {
  reportsDir = file('./build/reports/checkstyle')
  configFile = file('./checkstyle.xml')
  ignoreFailures = true
}
checkstyleTest {
  excludes = ['**/*']
}

findbugs {
  reportsDir = file('./build/reports/findbugs')
  reportLevel = "low"
  ignoreFailures = true
}
findbugsTest {
  excludes = ['**/*']
}

cobertura{
  coverageFormats = ['xml','html']
  coverageDirs = [sourceSets.main.resources.srcDirs]
  coverageReportDir = file('build/reports/cobertura')
}